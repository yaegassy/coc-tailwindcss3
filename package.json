{
  "name": "@yaegassy/coc-tailwindcss3",
  "version": "0.1.1",
  "description": "Intelligent Tailwind CSS tooling for coc.nvim",
  "author": "yaegassy <yosstools@gmail.com>",
  "license": "MIT",
  "main": "lib/index.js",
  "keywords": [
    "coc.nvim",
    "tailwind",
    "tailwindcss",
    "css",
    "intellisense",
    "autocomplete",
    "vim",
    "neovim"
  ],
  "engines": {
    "coc": "^0.0.80"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yaegassy/coc-tailwindcss3"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "lint": "eslint src --ext ts",
    "clean": "rimraf lib",
    "watch": "node esbuild.js --watch",
    "build": "node esbuild.js",
    "prepare": "node esbuild.js"
  },
  "prettier": {
    "singleQuote": true,
    "printWidth": 120,
    "semi": true
  },
  "devDependencies": {
    "@types/minimatch": "^3.0.5",
    "@types/node": "^16.11.26",
    "@typescript-eslint/eslint-plugin": "^5.14.0",
    "@typescript-eslint/parser": "^5.14.0",
    "coc.nvim": "^0.0.81-next.22",
    "esbuild": "^0.14.25",
    "eslint": "^8.8.0",
    "eslint-config-prettier": "^8.5.0",
    "eslint-plugin-prettier": "^4.0.0",
    "prettier": "^2.5.1",
    "rimraf": "^3.0.2",
    "typescript": "^4.6.3"
  },
  "activationEvents": [
    "workspaceContains:**/tailwind.js",
    "workspaceContains:**/tailwind.cjs",
    "workspaceContains:**/tailwind.config.js",
    "workspaceContains:**/tailwind.config.cjs"
  ],
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "coc-tailwindcss3 configuration",
      "properties": {
        "tailwindCSS.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable coc-tailwindcss3 extension"
        },
        "tailwindCSS.trace.server": {
          "type": "string",
          "default": "off",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "description": "Trace level of tailwindCSS language server"
        },
        "tailwindCSS.custom.serverPath": {
          "type": "string",
          "default": "",
          "description": "Custom path to server module. If there is no setting, the built-in module will be used"
        },
        "tailwindCSS.emmetCompletions": {
          "type": "boolean",
          "default": false,
          "description": "Enable class name completions when using Emmet-style syntax, for example `div.bg-red-500.uppercase`"
        },
        "tailwindCSS.includeLanguages": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {
            "eelixir": "html",
            "elixir": "html",
            "eruby": "html",
            "htmldjango": "html",
            "html.twig": "html"
          },
          "markdownDescription": "Enable features in languages that are not supported by default. Add a mapping here between the new language and an already supported language.\n E.g.: `{\"plaintext\": \"html\"}`"
        },
        "tailwindCSS.files.exclude": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "**/.git/**",
            "**/node_modules/**",
            "**/.hg/**"
          ],
          "markdownDescription": "Configure glob patterns to exclude from all IntelliSense features. Inherits all glob patterns from the `#files.exclude#` setting."
        },
        "tailwindCSS.classAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "class",
            "className",
            "ngClass"
          ],
          "markdownDescription": "The HTML attributes for which to provide class completions, hover previews, linting etc."
        },
        "tailwindCSS.suggestions": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable autocomplete suggestions.",
          "scope": "language-overridable"
        },
        "tailwindCSS.hovers": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable hovers.",
          "scope": "language-overridable"
        },
        "tailwindCSS.codeActions": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable code actions.",
          "scope": "language-overridable"
        },
        "tailwindCSS.colorDecorators": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Controls whether the editor should render inline color decorators for Tailwind CSS classes and helper functions.",
          "scope": "language-overridable"
        },
        "tailwindCSS.validate": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable linting. Rules can be configured individually using the `tailwindcss.lint.*` settings",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.cssConflict": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "warning",
          "markdownDescription": "Class names on the same HTML element which apply the same CSS property or properties",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidApply": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "error",
          "markdownDescription": "Unsupported use of the [`@apply` directive](https://tailwindcss.com/docs/functions-and-directives/#apply)",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidScreen": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "error",
          "markdownDescription": "Unknown screen name used with the [`@screen` directive](https://tailwindcss.com/docs/functions-and-directives/#screen)",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidVariant": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "error",
          "markdownDescription": "Unknown variant name used with the [`@variants` directive](https://tailwindcss.com/docs/functions-and-directives/#variants)",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidConfigPath": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "error",
          "markdownDescription": "Unknown or invalid path used with the [`theme` helper](https://tailwindcss.com/docs/functions-and-directives/#theme)",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidTailwindDirective": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "error",
          "markdownDescription": "Unknown value used with the [`@tailwind` directive](https://tailwindcss.com/docs/functions-and-directives/#tailwind)",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.recommendedVariantOrder": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "warning",
          "markdownDescription": "Class variants not in the recommended order (applies in [JIT mode](https://tailwindcss.com/docs/just-in-time-mode) only)",
          "scope": "language-overridable"
        },
        "tailwindCSS.experimental.classRegex": {
          "type": "array",
          "scope": "language-overridable"
        },
        "tailwindCSS.showPixelEquivalents": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Show `px` equivalents for `rem` CSS values."
        },
        "tailwindCSS.rootFontSize": {
          "type": "number",
          "default": 16,
          "markdownDescription": "Root font size in pixels. Used to convert `rem` CSS values to their `px` equivalents. See `#tailwindCSS.showPixelEquivalents#`."
        },
        "tailwindCSS.inspectPort": {
          "type": [
            "number",
            "null"
          ],
          "default": null,
          "markdownDescription": "Enable the Node.js inspector agent for the language server and listen on the specified port."
        }
      }
    },
    "commands": [
      {
        "command": "tailwindCSS.showOutput",
        "title": "Tailwind CSS: Show Output"
      }
    ]
  },
  "dependencies": {
    "@tailwindcss/language-server": "^0.0.7",
    "minimatch": "^5.0.1"
  }
}
